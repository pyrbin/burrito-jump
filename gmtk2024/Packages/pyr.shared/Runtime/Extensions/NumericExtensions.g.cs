//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Generated by T4 (Mono.TextTemplating) from the file NumericExtensions.tt
//

using System;
using System.Runtime.CompilerServices;
using pyr.Union.Monads;

using static pyr.Union.Global;

namespace pyr.Shared.Extensions;

public static class Int16Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int16> CheckedAdd(this System.Int16 a, System.Int16 b)
    {
        try
        {
            checked
            {
                return (System.Int16)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 SaturatingAdd(this System.Int16 a, System.Int16 b)
    {
        return (System.Int16)a.CheckedAdd(b).Or(System.Int16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 WrappingAdd(this System.Int16 a, System.Int16 b)
    {
        unchecked
        {
            return (System.Int16)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int16> CheckedSub(this System.Int16 a, System.Int16 b)
    {
        try
        {
            checked
            {
                return (System.Int16)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 SaturatingSub(this System.Int16 a, System.Int16 b)
    {
        return (System.Int16)a.CheckedSub(b).Or(System.Int16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 WrappingSub(this System.Int16 a, System.Int16 b)
    {
        unchecked
        {
            return (System.Int16)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int16> CheckedMul(this System.Int16 a, System.Int16 b)
    {
        try
        {
            checked
            {
                return (System.Int16)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 SaturatingMul(this System.Int16 a, System.Int16 b)
    {
        return (System.Int16)a.CheckedMul(b).Or(System.Int16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 WrappingMul(this System.Int16 a, System.Int16 b)
    {
        unchecked
        {
            return (System.Int16)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int16> CheckedDiv(this System.Int16 a, System.Int16 b)
    {
        try
        {
            checked
            {
                return (System.Int16)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 SaturatingDiv(this System.Int16 a, System.Int16 b)
    {
        return (System.Int16)a.CheckedDiv(b).Or(System.Int16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 WrappingDiv(this System.Int16 a, System.Int16 b)
    {
        unchecked
        {
            return (System.Int16)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int16> CheckedRem(this System.Int16 a, System.Int16 b)
    {
        try
        {
            checked
            {
                return (System.Int16)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 SaturatingRem(this System.Int16 a, System.Int16 b)
    {
        return (System.Int16)a.CheckedRem(b).Or(System.Int16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int16 WrappingRem(this System.Int16 a, System.Int16 b)
    {
        unchecked
        {
            return (System.Int16)(a % b);
        }
    }
}

public static class Int32Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int32> CheckedAdd(this System.Int32 a, System.Int32 b)
    {
        try
        {
            checked
            {
                return (System.Int32)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 SaturatingAdd(this System.Int32 a, System.Int32 b)
    {
        return (System.Int32)a.CheckedAdd(b).Or(System.Int32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 WrappingAdd(this System.Int32 a, System.Int32 b)
    {
        unchecked
        {
            return (System.Int32)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int32> CheckedSub(this System.Int32 a, System.Int32 b)
    {
        try
        {
            checked
            {
                return (System.Int32)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 SaturatingSub(this System.Int32 a, System.Int32 b)
    {
        return (System.Int32)a.CheckedSub(b).Or(System.Int32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 WrappingSub(this System.Int32 a, System.Int32 b)
    {
        unchecked
        {
            return (System.Int32)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int32> CheckedMul(this System.Int32 a, System.Int32 b)
    {
        try
        {
            checked
            {
                return (System.Int32)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 SaturatingMul(this System.Int32 a, System.Int32 b)
    {
        return (System.Int32)a.CheckedMul(b).Or(System.Int32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 WrappingMul(this System.Int32 a, System.Int32 b)
    {
        unchecked
        {
            return (System.Int32)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int32> CheckedDiv(this System.Int32 a, System.Int32 b)
    {
        try
        {
            checked
            {
                return (System.Int32)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 SaturatingDiv(this System.Int32 a, System.Int32 b)
    {
        return (System.Int32)a.CheckedDiv(b).Or(System.Int32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 WrappingDiv(this System.Int32 a, System.Int32 b)
    {
        unchecked
        {
            return (System.Int32)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int32> CheckedRem(this System.Int32 a, System.Int32 b)
    {
        try
        {
            checked
            {
                return (System.Int32)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 SaturatingRem(this System.Int32 a, System.Int32 b)
    {
        return (System.Int32)a.CheckedRem(b).Or(System.Int32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int32 WrappingRem(this System.Int32 a, System.Int32 b)
    {
        unchecked
        {
            return (System.Int32)(a % b);
        }
    }
}

public static class Int64Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int64> CheckedAdd(this System.Int64 a, System.Int64 b)
    {
        try
        {
            checked
            {
                return (System.Int64)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 SaturatingAdd(this System.Int64 a, System.Int64 b)
    {
        return (System.Int64)a.CheckedAdd(b).Or(System.Int64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 WrappingAdd(this System.Int64 a, System.Int64 b)
    {
        unchecked
        {
            return (System.Int64)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int64> CheckedSub(this System.Int64 a, System.Int64 b)
    {
        try
        {
            checked
            {
                return (System.Int64)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 SaturatingSub(this System.Int64 a, System.Int64 b)
    {
        return (System.Int64)a.CheckedSub(b).Or(System.Int64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 WrappingSub(this System.Int64 a, System.Int64 b)
    {
        unchecked
        {
            return (System.Int64)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int64> CheckedMul(this System.Int64 a, System.Int64 b)
    {
        try
        {
            checked
            {
                return (System.Int64)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 SaturatingMul(this System.Int64 a, System.Int64 b)
    {
        return (System.Int64)a.CheckedMul(b).Or(System.Int64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 WrappingMul(this System.Int64 a, System.Int64 b)
    {
        unchecked
        {
            return (System.Int64)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int64> CheckedDiv(this System.Int64 a, System.Int64 b)
    {
        try
        {
            checked
            {
                return (System.Int64)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 SaturatingDiv(this System.Int64 a, System.Int64 b)
    {
        return (System.Int64)a.CheckedDiv(b).Or(System.Int64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 WrappingDiv(this System.Int64 a, System.Int64 b)
    {
        unchecked
        {
            return (System.Int64)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Int64> CheckedRem(this System.Int64 a, System.Int64 b)
    {
        try
        {
            checked
            {
                return (System.Int64)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 SaturatingRem(this System.Int64 a, System.Int64 b)
    {
        return (System.Int64)a.CheckedRem(b).Or(System.Int64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Int64 WrappingRem(this System.Int64 a, System.Int64 b)
    {
        unchecked
        {
            return (System.Int64)(a % b);
        }
    }
}

public static class I128Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<i128> CheckedAdd(this i128 a, i128 b)
    {
        try
        {
            checked
            {
                return (i128)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 SaturatingAdd(this i128 a, i128 b)
    {
        return (i128)a.CheckedAdd(b).Or(i128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 WrappingAdd(this i128 a, i128 b)
    {
        unchecked
        {
            return (i128)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<i128> CheckedSub(this i128 a, i128 b)
    {
        try
        {
            checked
            {
                return (i128)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 SaturatingSub(this i128 a, i128 b)
    {
        return (i128)a.CheckedSub(b).Or(i128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 WrappingSub(this i128 a, i128 b)
    {
        unchecked
        {
            return (i128)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<i128> CheckedMul(this i128 a, i128 b)
    {
        try
        {
            checked
            {
                return (i128)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 SaturatingMul(this i128 a, i128 b)
    {
        return (i128)a.CheckedMul(b).Or(i128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 WrappingMul(this i128 a, i128 b)
    {
        unchecked
        {
            return (i128)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<i128> CheckedDiv(this i128 a, i128 b)
    {
        try
        {
            checked
            {
                return (i128)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 SaturatingDiv(this i128 a, i128 b)
    {
        return (i128)a.CheckedDiv(b).Or(i128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 WrappingDiv(this i128 a, i128 b)
    {
        unchecked
        {
            return (i128)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<i128> CheckedRem(this i128 a, i128 b)
    {
        try
        {
            checked
            {
                return (i128)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 SaturatingRem(this i128 a, i128 b)
    {
        return (i128)a.CheckedRem(b).Or(i128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static i128 WrappingRem(this i128 a, i128 b)
    {
        unchecked
        {
            return (i128)(a % b);
        }
    }
}

public static class ByteExtensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Byte> CheckedAdd(this System.Byte a, System.Byte b)
    {
        try
        {
            checked
            {
                return (System.Byte)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte SaturatingAdd(this System.Byte a, System.Byte b)
    {
        return (System.Byte)a.CheckedAdd(b).Or(System.Byte.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte WrappingAdd(this System.Byte a, System.Byte b)
    {
        unchecked
        {
            return (System.Byte)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Byte> CheckedSub(this System.Byte a, System.Byte b)
    {
        try
        {
            checked
            {
                return (System.Byte)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte SaturatingSub(this System.Byte a, System.Byte b)
    {
        return (System.Byte)a.CheckedSub(b).Or(System.Byte.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte WrappingSub(this System.Byte a, System.Byte b)
    {
        unchecked
        {
            return (System.Byte)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Byte> CheckedMul(this System.Byte a, System.Byte b)
    {
        try
        {
            checked
            {
                return (System.Byte)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte SaturatingMul(this System.Byte a, System.Byte b)
    {
        return (System.Byte)a.CheckedMul(b).Or(System.Byte.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte WrappingMul(this System.Byte a, System.Byte b)
    {
        unchecked
        {
            return (System.Byte)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Byte> CheckedDiv(this System.Byte a, System.Byte b)
    {
        try
        {
            checked
            {
                return (System.Byte)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte SaturatingDiv(this System.Byte a, System.Byte b)
    {
        return (System.Byte)a.CheckedDiv(b).Or(System.Byte.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte WrappingDiv(this System.Byte a, System.Byte b)
    {
        unchecked
        {
            return (System.Byte)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Byte> CheckedRem(this System.Byte a, System.Byte b)
    {
        try
        {
            checked
            {
                return (System.Byte)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte SaturatingRem(this System.Byte a, System.Byte b)
    {
        return (System.Byte)a.CheckedRem(b).Or(System.Byte.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Byte WrappingRem(this System.Byte a, System.Byte b)
    {
        unchecked
        {
            return (System.Byte)(a % b);
        }
    }
}

public static class UInt16Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt16> CheckedAdd(this System.UInt16 a, System.UInt16 b)
    {
        try
        {
            checked
            {
                return (System.UInt16)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 SaturatingAdd(this System.UInt16 a, System.UInt16 b)
    {
        return (System.UInt16)a.CheckedAdd(b).Or(System.UInt16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 WrappingAdd(this System.UInt16 a, System.UInt16 b)
    {
        unchecked
        {
            return (System.UInt16)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt16> CheckedSub(this System.UInt16 a, System.UInt16 b)
    {
        try
        {
            checked
            {
                return (System.UInt16)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 SaturatingSub(this System.UInt16 a, System.UInt16 b)
    {
        return (System.UInt16)a.CheckedSub(b).Or(System.UInt16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 WrappingSub(this System.UInt16 a, System.UInt16 b)
    {
        unchecked
        {
            return (System.UInt16)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt16> CheckedMul(this System.UInt16 a, System.UInt16 b)
    {
        try
        {
            checked
            {
                return (System.UInt16)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 SaturatingMul(this System.UInt16 a, System.UInt16 b)
    {
        return (System.UInt16)a.CheckedMul(b).Or(System.UInt16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 WrappingMul(this System.UInt16 a, System.UInt16 b)
    {
        unchecked
        {
            return (System.UInt16)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt16> CheckedDiv(this System.UInt16 a, System.UInt16 b)
    {
        try
        {
            checked
            {
                return (System.UInt16)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 SaturatingDiv(this System.UInt16 a, System.UInt16 b)
    {
        return (System.UInt16)a.CheckedDiv(b).Or(System.UInt16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 WrappingDiv(this System.UInt16 a, System.UInt16 b)
    {
        unchecked
        {
            return (System.UInt16)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt16> CheckedRem(this System.UInt16 a, System.UInt16 b)
    {
        try
        {
            checked
            {
                return (System.UInt16)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 SaturatingRem(this System.UInt16 a, System.UInt16 b)
    {
        return (System.UInt16)a.CheckedRem(b).Or(System.UInt16.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt16 WrappingRem(this System.UInt16 a, System.UInt16 b)
    {
        unchecked
        {
            return (System.UInt16)(a % b);
        }
    }
}

public static class UInt32Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt32> CheckedAdd(this System.UInt32 a, System.UInt32 b)
    {
        try
        {
            checked
            {
                return (System.UInt32)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 SaturatingAdd(this System.UInt32 a, System.UInt32 b)
    {
        return (System.UInt32)a.CheckedAdd(b).Or(System.UInt32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 WrappingAdd(this System.UInt32 a, System.UInt32 b)
    {
        unchecked
        {
            return (System.UInt32)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt32> CheckedSub(this System.UInt32 a, System.UInt32 b)
    {
        try
        {
            checked
            {
                return (System.UInt32)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 SaturatingSub(this System.UInt32 a, System.UInt32 b)
    {
        return (System.UInt32)a.CheckedSub(b).Or(System.UInt32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 WrappingSub(this System.UInt32 a, System.UInt32 b)
    {
        unchecked
        {
            return (System.UInt32)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt32> CheckedMul(this System.UInt32 a, System.UInt32 b)
    {
        try
        {
            checked
            {
                return (System.UInt32)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 SaturatingMul(this System.UInt32 a, System.UInt32 b)
    {
        return (System.UInt32)a.CheckedMul(b).Or(System.UInt32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 WrappingMul(this System.UInt32 a, System.UInt32 b)
    {
        unchecked
        {
            return (System.UInt32)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt32> CheckedDiv(this System.UInt32 a, System.UInt32 b)
    {
        try
        {
            checked
            {
                return (System.UInt32)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 SaturatingDiv(this System.UInt32 a, System.UInt32 b)
    {
        return (System.UInt32)a.CheckedDiv(b).Or(System.UInt32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 WrappingDiv(this System.UInt32 a, System.UInt32 b)
    {
        unchecked
        {
            return (System.UInt32)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt32> CheckedRem(this System.UInt32 a, System.UInt32 b)
    {
        try
        {
            checked
            {
                return (System.UInt32)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 SaturatingRem(this System.UInt32 a, System.UInt32 b)
    {
        return (System.UInt32)a.CheckedRem(b).Or(System.UInt32.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt32 WrappingRem(this System.UInt32 a, System.UInt32 b)
    {
        unchecked
        {
            return (System.UInt32)(a % b);
        }
    }
}

public static class UInt64Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt64> CheckedAdd(this System.UInt64 a, System.UInt64 b)
    {
        try
        {
            checked
            {
                return (System.UInt64)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 SaturatingAdd(this System.UInt64 a, System.UInt64 b)
    {
        return (System.UInt64)a.CheckedAdd(b).Or(System.UInt64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 WrappingAdd(this System.UInt64 a, System.UInt64 b)
    {
        unchecked
        {
            return (System.UInt64)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt64> CheckedSub(this System.UInt64 a, System.UInt64 b)
    {
        try
        {
            checked
            {
                return (System.UInt64)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 SaturatingSub(this System.UInt64 a, System.UInt64 b)
    {
        return (System.UInt64)a.CheckedSub(b).Or(System.UInt64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 WrappingSub(this System.UInt64 a, System.UInt64 b)
    {
        unchecked
        {
            return (System.UInt64)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt64> CheckedMul(this System.UInt64 a, System.UInt64 b)
    {
        try
        {
            checked
            {
                return (System.UInt64)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 SaturatingMul(this System.UInt64 a, System.UInt64 b)
    {
        return (System.UInt64)a.CheckedMul(b).Or(System.UInt64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 WrappingMul(this System.UInt64 a, System.UInt64 b)
    {
        unchecked
        {
            return (System.UInt64)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt64> CheckedDiv(this System.UInt64 a, System.UInt64 b)
    {
        try
        {
            checked
            {
                return (System.UInt64)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 SaturatingDiv(this System.UInt64 a, System.UInt64 b)
    {
        return (System.UInt64)a.CheckedDiv(b).Or(System.UInt64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 WrappingDiv(this System.UInt64 a, System.UInt64 b)
    {
        unchecked
        {
            return (System.UInt64)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.UInt64> CheckedRem(this System.UInt64 a, System.UInt64 b)
    {
        try
        {
            checked
            {
                return (System.UInt64)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 SaturatingRem(this System.UInt64 a, System.UInt64 b)
    {
        return (System.UInt64)a.CheckedRem(b).Or(System.UInt64.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.UInt64 WrappingRem(this System.UInt64 a, System.UInt64 b)
    {
        unchecked
        {
            return (System.UInt64)(a % b);
        }
    }
}

public static class U128Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<u128> CheckedAdd(this u128 a, u128 b)
    {
        try
        {
            checked
            {
                return (u128)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 SaturatingAdd(this u128 a, u128 b)
    {
        return (u128)a.CheckedAdd(b).Or(u128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 WrappingAdd(this u128 a, u128 b)
    {
        unchecked
        {
            return (u128)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<u128> CheckedSub(this u128 a, u128 b)
    {
        try
        {
            checked
            {
                return (u128)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 SaturatingSub(this u128 a, u128 b)
    {
        return (u128)a.CheckedSub(b).Or(u128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 WrappingSub(this u128 a, u128 b)
    {
        unchecked
        {
            return (u128)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<u128> CheckedMul(this u128 a, u128 b)
    {
        try
        {
            checked
            {
                return (u128)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 SaturatingMul(this u128 a, u128 b)
    {
        return (u128)a.CheckedMul(b).Or(u128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 WrappingMul(this u128 a, u128 b)
    {
        unchecked
        {
            return (u128)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<u128> CheckedDiv(this u128 a, u128 b)
    {
        try
        {
            checked
            {
                return (u128)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 SaturatingDiv(this u128 a, u128 b)
    {
        return (u128)a.CheckedDiv(b).Or(u128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 WrappingDiv(this u128 a, u128 b)
    {
        unchecked
        {
            return (u128)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<u128> CheckedRem(this u128 a, u128 b)
    {
        try
        {
            checked
            {
                return (u128)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 SaturatingRem(this u128 a, u128 b)
    {
        return (u128)a.CheckedRem(b).Or(u128.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static u128 WrappingRem(this u128 a, u128 b)
    {
        unchecked
        {
            return (u128)(a % b);
        }
    }
}

public static class SingleExtensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Single> CheckedAdd(this System.Single a, System.Single b)
    {
        try
        {
            checked
            {
                return (System.Single)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single SaturatingAdd(this System.Single a, System.Single b)
    {
        return (System.Single)a.CheckedAdd(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single WrappingAdd(this System.Single a, System.Single b)
    {
        unchecked
        {
            return (System.Single)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Single> CheckedSub(this System.Single a, System.Single b)
    {
        try
        {
            checked
            {
                return (System.Single)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single SaturatingSub(this System.Single a, System.Single b)
    {
        return (System.Single)a.CheckedSub(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single WrappingSub(this System.Single a, System.Single b)
    {
        unchecked
        {
            return (System.Single)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Single> CheckedMul(this System.Single a, System.Single b)
    {
        try
        {
            checked
            {
                return (System.Single)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single SaturatingMul(this System.Single a, System.Single b)
    {
        return (System.Single)a.CheckedMul(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single WrappingMul(this System.Single a, System.Single b)
    {
        unchecked
        {
            return (System.Single)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Single> CheckedDiv(this System.Single a, System.Single b)
    {
        try
        {
            checked
            {
                return (System.Single)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single SaturatingDiv(this System.Single a, System.Single b)
    {
        return (System.Single)a.CheckedDiv(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single WrappingDiv(this System.Single a, System.Single b)
    {
        unchecked
        {
            return (System.Single)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Single> CheckedRem(this System.Single a, System.Single b)
    {
        try
        {
            checked
            {
                return (System.Single)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single SaturatingRem(this System.Single a, System.Single b)
    {
        return (System.Single)a.CheckedRem(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Single WrappingRem(this System.Single a, System.Single b)
    {
        unchecked
        {
            return (System.Single)(a % b);
        }
    }
}

public static class DoubleExtensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Double> CheckedAdd(this System.Double a, System.Double b)
    {
        try
        {
            checked
            {
                return (System.Double)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double SaturatingAdd(this System.Double a, System.Double b)
    {
        return (System.Double)a.CheckedAdd(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double WrappingAdd(this System.Double a, System.Double b)
    {
        unchecked
        {
            return (System.Double)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Double> CheckedSub(this System.Double a, System.Double b)
    {
        try
        {
            checked
            {
                return (System.Double)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double SaturatingSub(this System.Double a, System.Double b)
    {
        return (System.Double)a.CheckedSub(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double WrappingSub(this System.Double a, System.Double b)
    {
        unchecked
        {
            return (System.Double)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Double> CheckedMul(this System.Double a, System.Double b)
    {
        try
        {
            checked
            {
                return (System.Double)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double SaturatingMul(this System.Double a, System.Double b)
    {
        return (System.Double)a.CheckedMul(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double WrappingMul(this System.Double a, System.Double b)
    {
        unchecked
        {
            return (System.Double)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Double> CheckedDiv(this System.Double a, System.Double b)
    {
        try
        {
            checked
            {
                return (System.Double)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double SaturatingDiv(this System.Double a, System.Double b)
    {
        return (System.Double)a.CheckedDiv(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double WrappingDiv(this System.Double a, System.Double b)
    {
        unchecked
        {
            return (System.Double)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Double> CheckedRem(this System.Double a, System.Double b)
    {
        try
        {
            checked
            {
                return (System.Double)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double SaturatingRem(this System.Double a, System.Double b)
    {
        return (System.Double)a.CheckedRem(b).Or(float.PositiveInfinity);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Double WrappingRem(this System.Double a, System.Double b)
    {
        unchecked
        {
            return (System.Double)(a % b);
        }
    }
}

public static class DecimalExtensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Decimal> CheckedAdd(this System.Decimal a, System.Decimal b)
    {
        try
        {
            checked
            {
                return (System.Decimal)(a + b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal SaturatingAdd(this System.Decimal a, System.Decimal b)
    {
        return (System.Decimal)a.CheckedAdd(b).Or(decimal.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal WrappingAdd(this System.Decimal a, System.Decimal b)
    {
        unchecked
        {
            return (System.Decimal)(a + b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Decimal> CheckedSub(this System.Decimal a, System.Decimal b)
    {
        try
        {
            checked
            {
                return (System.Decimal)(a - b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal SaturatingSub(this System.Decimal a, System.Decimal b)
    {
        return (System.Decimal)a.CheckedSub(b).Or(decimal.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal WrappingSub(this System.Decimal a, System.Decimal b)
    {
        unchecked
        {
            return (System.Decimal)(a - b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Decimal> CheckedMul(this System.Decimal a, System.Decimal b)
    {
        try
        {
            checked
            {
                return (System.Decimal)(a * b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal SaturatingMul(this System.Decimal a, System.Decimal b)
    {
        return (System.Decimal)a.CheckedMul(b).Or(decimal.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal WrappingMul(this System.Decimal a, System.Decimal b)
    {
        unchecked
        {
            return (System.Decimal)(a * b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Decimal> CheckedDiv(this System.Decimal a, System.Decimal b)
    {
        try
        {
            checked
            {
                return (System.Decimal)(a / b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal SaturatingDiv(this System.Decimal a, System.Decimal b)
    {
        return (System.Decimal)a.CheckedDiv(b).Or(decimal.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal WrappingDiv(this System.Decimal a, System.Decimal b)
    {
        unchecked
        {
            return (System.Decimal)(a / b);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Option<System.Decimal> CheckedRem(this System.Decimal a, System.Decimal b)
    {
        try
        {
            checked
            {
                return (System.Decimal)(a % b);
            }
        }
        catch (OverflowException)
        {
            return None;
        }
        catch (DivideByZeroException)
        {
            return None;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal SaturatingRem(this System.Decimal a, System.Decimal b)
    {
        return (System.Decimal)a.CheckedRem(b).Or(decimal.MaxValue);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static System.Decimal WrappingRem(this System.Decimal a, System.Decimal b)
    {
        unchecked
        {
            return (System.Decimal)(a % b);
        }
    }
}

